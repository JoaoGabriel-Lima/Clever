/* eslint-disable new-cap */
/* eslint-disable react/prop-types */
/* eslint-disable camelcase */
/* eslint-disable require-jsdoc */
/* eslint-disable react/no-unescaped-entities */
import type { NextPage } from "next";
import Head from "next/head";
import React from "react";
import { HomeCointainer } from "../../styles/components/home";
import { AnimatePresence, motion } from "framer-motion";
import Post from "../components/post";
import AddPost from "../components/addpost";
import nookies from "nookies";
import getUserData from "../middleware/utils";
import { useRouter } from "next/router";
import axios from "axios";
import useSWR from "swr";
import { parseCookies } from "nookies";
import { useSWRConfig } from "swr";
import checkUserToken from "../middleware/interceptor";
import toast, { Toaster } from "react-hot-toast";

// Parse a string to date and return a string with how many time ago
const timeAgo = (date) => {
  const nowday: any = new Date();
  const postday: any = new Date(date);
  const seconds = Math.floor((nowday - postday) / 1000);
  let interval = Math.floor(seconds / 31536000);
  if (interval >= 1) {
    return interval + "y";
  }
  interval = Math.floor(seconds / 2592000);
  if (interval >= 1) {
    return interval + "m";
  }
  interval = Math.floor(seconds / 86400);
  if (interval >= 1) {
    return interval + "d";
  }
  interval = Math.floor(seconds / 3600);
  // console.log(interval);
  if (interval >= 1) {
    return interval + "h";
  }
  interval = Math.floor(seconds / 60);
  if (interval >= 1) {
    return interval + "m";
  }
  return Math.floor(seconds) + "s";
};

const fetcher = (url) => {
  const parsedCookies = parseCookies();
  return checkUserToken(parsedCookies.token, parsedCookies.refresh_token).then(
    (res) => {
      if (res == true) {
        return axios
          .get(url, {
            headers: {
              Authorization: `Bearer ${parsedCookies.token}`,
            },
          })
          .then((res) => res.data.data);
      } else {
        return [];
      }
    }
  );
};
function LoadPosts(auth) {
  const { data, error } = useSWR(
    "https://cleverbackend.herokuapp.com/api/posts",
    fetcher
  );

  if (error) {
    if (error.response.status != 401) {
      return (
        <>
          <Post loading />
        </>
      );
    }
  }
  if (!data)
    return (
      <>
        <Post loading />
        <Post loading />
        <Post loading />
        <Post loading />
      </>
    );

  return (
    <AnimatePresence>
      {data
        .slice(0)
        .reverse()
        .map((post) => {
          // console.log(index);
          return (
            <Post
              key={post.id}
              name={post.author.name}
              username={`@${post.author.username}`}
              body={post.content}
              time={timeAgo(post.createdAt)}
              likes={post.likes.length}
              liked={post.likes
                .map((like) => like.user.username)
                .includes(auth.username)}
              id={post.id}
              amITheAuthor={post.author.username === auth.username}
            />
          );
        })}
    </AnimatePresence>
  );
}

const Dashboard: NextPage = (props: any) => {
  const { mutate } = useSWRConfig();
  const router = useRouter();
  const signOut = () => {
    nookies.destroy(null, "token");
    nookies.destroy(null, "refresh_token");
    router.push("/");
  };

  const loadMorePosts = () => {
    const myPromise = mutate("https://cleverbackend.herokuapp.com/api/posts");
    // scroll to top
    window.scrollTo(0, 0);
    toast.promise(myPromise, {
      loading: "Loading",
      success: "Got the data",
      error: "Error when fetching",
    });
  };
  return (
    <HomeCointainer>
      <Head>
        <title>Clever - Dashboard</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex justify-center w-full p-4  py-10">
        <Toaster
          toastOptions={{
            position: "bottom-center",
            style: {
              background: "#23232f",
              color: "#fff",
            },
          }}
        />
        <motion.div
          initial={{ opacity: 0, x: -20 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ duration: 0.3 }}
          className="flex justify-start items-center flex-col w-full max-w-[800px]"
        >
          <div className="mb-8 w-full flex justify-between items-center">
            <div
              className="flex flex-col justify-start cursor-pointer"
              onClick={() => loadMorePosts()}
            >
              <h1 className="text-white text-2xl font-medium">Your Feed</h1>
              <h3 className="text-[#4c6fff] font-medium">Clever</h3>
            </div>
            <div
              onClick={() => signOut()}
              className={` ${
                !props.auth ? "animate-pulse bg-[#51516c]/50" : "bg-transparent"
              } rounded-full w-12 h-12 cursor-pointer`}
            >
              {props.auth && (
                <img
                  className="w-full h-full rounded-full bg-[#636382]"
                  src={`https://avatars.dicebear.com/api/miniavs/${props.auth.name}.svg`}
                  alt="Profile"
                ></img>
              )}
            </div>
          </div>
          <AddPost />
          <div className="flex flex-col w-full justify-start items-start divide-y-[1px] divide-slate-300/10 gap-y-[1rem]">
            {LoadPosts(props.auth)}
          </div>
        </motion.div>
      </main>
    </HomeCointainer>
  );
};

export async function getServerSideProps(context) {
  // const { req } = context;

  const { token, refresh_token } = nookies.get(context);
  if (!refresh_token) {
    return {
      redirect: {
        destination: "/",
      },
      props: {
        props: {},
      },
    };
  }

  const res = await getUserData(token, refresh_token, context);
  if (res) {
    return {
      props: {
        auth: res,
      },
    };
  } else {
    return {
      redirect: {
        destination: "/",
        permanent: false,
      },
      props: {
        props: {},
      },
    };
  }
}

export default Dashboard;
